%h2 Summary

%table.list
  %thead
    %tr
      %th Country
      %th Orders
      %th Shipped
      %th
      %th Donations
      %th Received
      %th
  %tbody
    - Distributor.all.each do |distributor|
      - orders = distributor.orders.count
      - shipped = distributor.orders.shipped_count
      - total = distributor.orders.map(&:total).sum.to_money.exchange_to(distributor.currency)
      - donated = distributor.orders.donated.map(&:total).sum.to_money.exchange_to(distributor.currency)
      %tr{:class => cycle(:odd, :even)}
        %td= distributor.country
        %td.number= orders
        %td.number= shipped
        %td.number= p shipped, orders
        %td.number= m total
        %td.number= m donated
        %td.number= p donated.cents, total.cents
  %tfoot
    %tr.total
      - total = Order.all.map(&:total).sum.to_money.exchange_to('USD')
      - donated = Order.donated.map(&:total).sum.to_money.exchange_to('USD')
      %td.label Total
      %td.number= Order.count
      %td.number= Order.shipped_count
      %td.number= p Order.shipped_count, Order.count
      %td.number= m total
      %td.number= m donated
      %td.number= p donated.cents, total.cents

%h2= pluralize @unshipped.size, 'New Order'
- if @unshipped.any?
  %table
    = render :partial => 'orders/line_header'
    = render :partial => 'orders/line', :collection => @unshipped

%h2= pluralize @shipped.size, 'Shipped Order'
- if @shipped.any?
  %table
    = render :partial => 'orders/line_header'
    = render :partial => 'orders/line', :collection => @shipped
